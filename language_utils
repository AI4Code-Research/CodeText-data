def extract_java_params(function_code, comment, file_name,):
    metadata = {}
    report = analyze_file.analyze_source_code(file_name, function_code)
    # print(function_code)
    try:
        params = report.function_list[0].full_parameters  # 1 function only
    except IndexError:
        return None

    params_dict = {}
    
    print(params)

    for each in params:
        line = str(each).split(' ')
        print(line)
        params_dict[line[-1]] = {'type': line[-2], 'docstring': False}
        
    preprocessed = re.split(r"(@+[\w]*)", comment)

    splited_comment = []
    line = ""
    for sub_str in preprocessed:
        if re.search(r"(@+[\w]*)", sub_str):
            splited_comment.append(line)
            line = re.search(r"(@+[\w]*)", sub_str).group()
        else: 
            line += sub_str
    splited_comment.append(line)

    processed_docstring = []
    try:
        for line in splited_comment:
            if re.search(r"(@+[\w]*)", line):
                break_line = line.split(' ')
                # print(break_line[0])
                if break_line[0] == '@param':
                    if break_line[1] not in params_dict.keys():
                        params_dict[break_line[1]] = {}
                    params_dict[break_line[1]]['docstring'] = ' '.join(break_line[2:])

                else:
                    params_dict[break_line[0]] = ' '.join(break_line[1:])
            else:
                processed_docstring.append(line)
    except Exception:
        return None
    
    metadata['params'] = params_dict
    metadata['processed_docstring'] = processed_docstring
    metadata['processed_docstring_tokens'] = tokenize_docstring(' '.join(processed_docstring))